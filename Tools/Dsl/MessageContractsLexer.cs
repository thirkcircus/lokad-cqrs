//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /Users/abdullin/MessageContracts.g 2012-07-26 18:45:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  MessageContracts 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class MessageContractsLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int BlockToken=4;
	public const int COMMENT=5;
	public const int CONST=6;
	public const int CommandToken=7;
	public const int DisctionaryToken=8;
	public const int ESC_SEQ=9;
	public const int EXPLICIT=10;
	public const int EXTERN=11;
	public const int EntityDefinition=12;
	public const int EventToken=13;
	public const int ExternToken=14;
	public const int FragmentEntry=15;
	public const int FragmentGroup=16;
	public const int FragmentReference=17;
	public const int HEX_DIGIT=18;
	public const int ID=19;
	public const int IF=20;
	public const int INT=21;
	public const int INTERFACE=22;
	public const int MemberToken=23;
	public const int Modifier=24;
	public const int ModifierDefinition=25;
	public const int NAMESPACE=26;
	public const int NamespaceToken=27;
	public const int OCTAL_ESC=28;
	public const int STRING=29;
	public const int StringRepresentationToken=30;
	public const int TypeToken=31;
	public const int UNICODE_ESC=32;
	public const int USING=33;
	public const int UsingToken=34;
	public const int WS=35;

    // delegates
    // delegators

	public MessageContractsLexer()
	{
		OnCreated();
	}

	public MessageContractsLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public MessageContractsLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/Users/abdullin/MessageContracts.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__36() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__36() {}

    // $ANTLR start "T__36"
    [GrammarRule("T__36")]
    private void mT__36()
    {
    	EnterRule_T__36();
    	EnterRule("T__36", 1);
    	TraceIn("T__36", 1);
    		try
    		{
    		int _type = T__36;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:9:7: ( '(' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:9:9: '('
    		{
    		DebugLocation(9, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__36", 1);
    		LeaveRule("T__36", 1);
    		LeaveRule_T__36();
        }
    }
    // $ANTLR end "T__36"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__37() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__37() {}

    // $ANTLR start "T__37"
    [GrammarRule("T__37")]
    private void mT__37()
    {
    	EnterRule_T__37();
    	EnterRule("T__37", 2);
    	TraceIn("T__37", 2);
    		try
    		{
    		int _type = T__37;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:10:7: ( ')' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:10:9: ')'
    		{
    		DebugLocation(10, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__37", 2);
    		LeaveRule("T__37", 2);
    		LeaveRule_T__37();
        }
    }
    // $ANTLR end "T__37"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__38() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__38() {}

    // $ANTLR start "T__38"
    [GrammarRule("T__38")]
    private void mT__38()
    {
    	EnterRule_T__38();
    	EnterRule("T__38", 3);
    	TraceIn("T__38", 3);
    		try
    		{
    		int _type = T__38;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:11:7: ( ',' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:11:9: ','
    		{
    		DebugLocation(11, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__38", 3);
    		LeaveRule("T__38", 3);
    		LeaveRule_T__38();
        }
    }
    // $ANTLR end "T__38"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__39() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__39() {}

    // $ANTLR start "T__39"
    [GrammarRule("T__39")]
    private void mT__39()
    {
    	EnterRule_T__39();
    	EnterRule("T__39", 4);
    	TraceIn("T__39", 4);
    		try
    		{
    		int _type = T__39;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:12:7: ( '.' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:12:9: '.'
    		{
    		DebugLocation(12, 9);
    		Match('.'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__39", 4);
    		LeaveRule("T__39", 4);
    		LeaveRule_T__39();
        }
    }
    // $ANTLR end "T__39"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__40() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__40() {}

    // $ANTLR start "T__40"
    [GrammarRule("T__40")]
    private void mT__40()
    {
    	EnterRule_T__40();
    	EnterRule("T__40", 5);
    	TraceIn("T__40", 5);
    		try
    		{
    		int _type = T__40;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:13:7: ( ';' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:13:9: ';'
    		{
    		DebugLocation(13, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__40", 5);
    		LeaveRule("T__40", 5);
    		LeaveRule_T__40();
        }
    }
    // $ANTLR end "T__40"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__41() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__41() {}

    // $ANTLR start "T__41"
    [GrammarRule("T__41")]
    private void mT__41()
    {
    	EnterRule_T__41();
    	EnterRule("T__41", 6);
    	TraceIn("T__41", 6);
    		try
    		{
    		int _type = T__41;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:14:7: ( '=' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:14:9: '='
    		{
    		DebugLocation(14, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__41", 6);
    		LeaveRule("T__41", 6);
    		LeaveRule_T__41();
        }
    }
    // $ANTLR end "T__41"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__42() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__42() {}

    // $ANTLR start "T__42"
    [GrammarRule("T__42")]
    private void mT__42()
    {
    	EnterRule_T__42();
    	EnterRule("T__42", 7);
    	TraceIn("T__42", 7);
    		try
    		{
    		int _type = T__42;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:15:7: ( '{' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:15:9: '{'
    		{
    		DebugLocation(15, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__42", 7);
    		LeaveRule("T__42", 7);
    		LeaveRule_T__42();
        }
    }
    // $ANTLR end "T__42"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__43() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__43() {}

    // $ANTLR start "T__43"
    [GrammarRule("T__43")]
    private void mT__43()
    {
    	EnterRule_T__43();
    	EnterRule("T__43", 8);
    	TraceIn("T__43", 8);
    		try
    		{
    		int _type = T__43;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:16:7: ( '}' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:16:9: '}'
    		{
    		DebugLocation(16, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__43", 8);
    		LeaveRule("T__43", 8);
    		LeaveRule_T__43();
        }
    }
    // $ANTLR end "T__43"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXPLICIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXPLICIT() {}

    // $ANTLR start "EXPLICIT"
    [GrammarRule("EXPLICIT")]
    private void mEXPLICIT()
    {
    	EnterRule_EXPLICIT();
    	EnterRule("EXPLICIT", 9);
    	TraceIn("EXPLICIT", 9);
    		try
    		{
    		int _type = EXPLICIT;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:87:2: ( 'explicit' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:87:4: 'explicit'
    		{
    		DebugLocation(87, 4);
    		Match("explicit"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EXPLICIT", 9);
    		LeaveRule("EXPLICIT", 9);
    		LeaveRule_EXPLICIT();
        }
    }
    // $ANTLR end "EXPLICIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_IF() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_IF() {}

    // $ANTLR start "IF"
    [GrammarRule("IF")]
    private void mIF()
    {
    	EnterRule_IF();
    	EnterRule("IF", 10);
    	TraceIn("IF", 10);
    		try
    		{
    		int _type = IF;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:89:2: ( 'if' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:89:4: 'if'
    		{
    		DebugLocation(89, 4);
    		Match("if"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("IF", 10);
    		LeaveRule("IF", 10);
    		LeaveRule_IF();
        }
    }
    // $ANTLR end "IF"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_USING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_USING() {}

    // $ANTLR start "USING"
    [GrammarRule("USING")]
    private void mUSING()
    {
    	EnterRule_USING();
    	EnterRule("USING", 11);
    	TraceIn("USING", 11);
    		try
    		{
    		int _type = USING;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:91:5: ( 'using' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:91:7: 'using'
    		{
    		DebugLocation(91, 7);
    		Match("using"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("USING", 11);
    		LeaveRule("USING", 11);
    		LeaveRule_USING();
        }
    }
    // $ANTLR end "USING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CONST() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CONST() {}

    // $ANTLR start "CONST"
    [GrammarRule("CONST")]
    private void mCONST()
    {
    	EnterRule_CONST();
    	EnterRule("CONST", 12);
    	TraceIn("CONST", 12);
    		try
    		{
    		int _type = CONST;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:93:2: ( 'const' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:93:4: 'const'
    		{
    		DebugLocation(93, 4);
    		Match("const"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CONST", 12);
    		LeaveRule("CONST", 12);
    		LeaveRule_CONST();
        }
    }
    // $ANTLR end "CONST"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INTERFACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INTERFACE() {}

    // $ANTLR start "INTERFACE"
    [GrammarRule("INTERFACE")]
    private void mINTERFACE()
    {
    	EnterRule_INTERFACE();
    	EnterRule("INTERFACE", 13);
    	TraceIn("INTERFACE", 13);
    		try
    		{
    		int _type = INTERFACE;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:95:2: ( 'interface' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:95:4: 'interface'
    		{
    		DebugLocation(95, 4);
    		Match("interface"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INTERFACE", 13);
    		LeaveRule("INTERFACE", 13);
    		LeaveRule_INTERFACE();
        }
    }
    // $ANTLR end "INTERFACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NAMESPACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NAMESPACE() {}

    // $ANTLR start "NAMESPACE"
    [GrammarRule("NAMESPACE")]
    private void mNAMESPACE()
    {
    	EnterRule_NAMESPACE();
    	EnterRule("NAMESPACE", 14);
    	TraceIn("NAMESPACE", 14);
    		try
    		{
    		int _type = NAMESPACE;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:98:2: ( 'namespace' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:98:4: 'namespace'
    		{
    		DebugLocation(98, 4);
    		Match("namespace"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NAMESPACE", 14);
    		LeaveRule("NAMESPACE", 14);
    		LeaveRule_NAMESPACE();
        }
    }
    // $ANTLR end "NAMESPACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXTERN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXTERN() {}

    // $ANTLR start "EXTERN"
    [GrammarRule("EXTERN")]
    private void mEXTERN()
    {
    	EnterRule_EXTERN();
    	EnterRule("EXTERN", 15);
    	TraceIn("EXTERN", 15);
    		try
    		{
    		int _type = EXTERN;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:100:5: ( 'extern' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:100:7: 'extern'
    		{
    		DebugLocation(100, 7);
    		Match("extern"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EXTERN", 15);
    		LeaveRule("EXTERN", 15);
    		LeaveRule_EXTERN();
        }
    }
    // $ANTLR end "EXTERN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 16);
    	TraceIn("ID", 16);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:102:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '<' | '>' | '[' | ']' )* )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:102:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '<' | '>' | '[' | ']' )*
    		{
    		DebugLocation(102, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(102, 30);
    		// /Users/abdullin/MessageContracts.g:102:30: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '<' | '>' | '[' | ']' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='0' && LA1_0<='9')||LA1_0=='<'||LA1_0=='>'||(LA1_0>='A' && LA1_0<='[')||LA1_0==']'||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:
    				{
    				DebugLocation(102, 30);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 16);
    		LeaveRule("ID", 16);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Modifier() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Modifier() {}

    // $ANTLR start "Modifier"
    [GrammarRule("Modifier")]
    private void mModifier()
    {
    	EnterRule_Modifier();
    	EnterRule("Modifier", 17);
    	TraceIn("Modifier", 17);
    		try
    		{
    		int _type = Modifier;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:106:2: ( '?' | '!' | ';' | '$' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:
    		{
    		DebugLocation(106, 2);
    		if (input.LA(1)=='!'||input.LA(1)=='$'||input.LA(1)==';'||input.LA(1)=='?')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("Modifier", 17);
    		LeaveRule("Modifier", 17);
    		LeaveRule_Modifier();
        }
    }
    // $ANTLR end "Modifier"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 18);
    	TraceIn("INT", 18);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:113:5: ( ( '0' .. '9' )+ )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:113:7: ( '0' .. '9' )+
    		{
    		DebugLocation(113, 7);
    		// /Users/abdullin/MessageContracts.g:113:7: ( '0' .. '9' )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='0' && LA2_0<='9')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:
    				{
    				DebugLocation(113, 7);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 18);
    		LeaveRule("INT", 18);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 19);
    	TraceIn("STRING", 19);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:117:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:117:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    		{
    		DebugLocation(117, 8);
    		Match('\"'); 
    		DebugLocation(117, 12);
    		// /Users/abdullin/MessageContracts.g:117:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
    		try { DebugEnterSubRule(3);
    		while (true)
    		{
    			int alt3=3;
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_0 = input.LA(1);

    			if ((LA3_0=='\\'))
    			{
    				alt3 = 1;
    			}
    			else if (((LA3_0>='\u0000' && LA3_0<='!')||(LA3_0>='#' && LA3_0<='[')||(LA3_0>=']' && LA3_0<='\uFFFF')))
    			{
    				alt3 = 2;
    			}


    			} finally { DebugExitDecision(3); }
    			switch ( alt3 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:117:14: ESC_SEQ
    				{
    				DebugLocation(117, 14);
    				mESC_SEQ(); 

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// /Users/abdullin/MessageContracts.g:117:24: ~ ( '\\\\' | '\"' )
    				{
    				DebugLocation(117, 24);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop3;
    			}
    		}

    		loop3:
    			;

    		} finally { DebugExitSubRule(3); }

    		DebugLocation(117, 39);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 19);
    		LeaveRule("STRING", 19);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 20);
    	TraceIn("HEX_DIGIT", 20);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:123:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:
    		{
    		DebugLocation(123, 11);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 20);
    		LeaveRule("HEX_DIGIT", 20);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ESC_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ESC_SEQ() {}

    // $ANTLR start "ESC_SEQ"
    [GrammarRule("ESC_SEQ")]
    private void mESC_SEQ()
    {
    	EnterRule_ESC_SEQ();
    	EnterRule("ESC_SEQ", 21);
    	TraceIn("ESC_SEQ", 21);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:127:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
    		int alt4=3;
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		int LA4_0 = input.LA(1);

    		if ((LA4_0=='\\'))
    		{
    			switch (input.LA(2))
    			{
    			case '\"':
    			case '\'':
    			case '\\':
    			case 'b':
    			case 'f':
    			case 'n':
    			case 'r':
    			case 't':
    				{
    				alt4 = 1;
    				}
    				break;
    			case 'u':
    				{
    				alt4 = 2;
    				}
    				break;
    			case '0':
    			case '1':
    			case '2':
    			case '3':
    			case '4':
    			case '5':
    			case '6':
    			case '7':
    				{
    				alt4 = 3;
    				}
    				break;
    			default:
    				{
    					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/abdullin/MessageContracts.g:127:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    			{
    			DebugLocation(127, 9);
    			Match('\\'); 
    			DebugLocation(127, 14);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /Users/abdullin/MessageContracts.g:128:9: UNICODE_ESC
    			{
    			DebugLocation(128, 9);
    			mUNICODE_ESC(); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// /Users/abdullin/MessageContracts.g:129:9: OCTAL_ESC
    			{
    			DebugLocation(129, 9);
    			mOCTAL_ESC(); 

    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("ESC_SEQ", 21);
    		LeaveRule("ESC_SEQ", 21);
    		LeaveRule_ESC_SEQ();
        }
    }
    // $ANTLR end "ESC_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OCTAL_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OCTAL_ESC() {}

    // $ANTLR start "OCTAL_ESC"
    [GrammarRule("OCTAL_ESC")]
    private void mOCTAL_ESC()
    {
    	EnterRule_OCTAL_ESC();
    	EnterRule("OCTAL_ESC", 22);
    	TraceIn("OCTAL_ESC", 22);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:134:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
    		int alt5=3;
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_0 = input.LA(1);

    		if ((LA5_0=='\\'))
    		{
    			int LA5_1 = input.LA(2);

    			if (((LA5_1>='0' && LA5_1<='3')))
    			{
    				int LA5_2 = input.LA(3);

    				if (((LA5_2>='0' && LA5_2<='7')))
    				{
    					int LA5_4 = input.LA(4);

    					if (((LA5_4>='0' && LA5_4<='7')))
    					{
    						alt5 = 1;
    					}
    					else
    					{
    						alt5 = 2;
    					}
    				}
    				else
    				{
    					alt5 = 3;
    				}
    			}
    			else if (((LA5_1>='4' && LA5_1<='7')))
    			{
    				int LA5_3 = input.LA(3);

    				if (((LA5_3>='0' && LA5_3<='7')))
    				{
    					alt5 = 2;
    				}
    				else
    				{
    					alt5 = 3;
    				}
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 5, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/abdullin/MessageContracts.g:134:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(134, 9);
    			Match('\\'); 
    			DebugLocation(134, 14);
    			input.Consume();

    			DebugLocation(134, 25);
    			input.Consume();

    			DebugLocation(134, 36);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /Users/abdullin/MessageContracts.g:135:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(135, 9);
    			Match('\\'); 
    			DebugLocation(135, 14);
    			input.Consume();

    			DebugLocation(135, 25);
    			input.Consume();


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// /Users/abdullin/MessageContracts.g:136:9: '\\\\' ( '0' .. '7' )
    			{
    			DebugLocation(136, 9);
    			Match('\\'); 
    			DebugLocation(136, 14);
    			input.Consume();


    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("OCTAL_ESC", 22);
    		LeaveRule("OCTAL_ESC", 22);
    		LeaveRule_OCTAL_ESC();
        }
    }
    // $ANTLR end "OCTAL_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNICODE_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNICODE_ESC() {}

    // $ANTLR start "UNICODE_ESC"
    [GrammarRule("UNICODE_ESC")]
    private void mUNICODE_ESC()
    {
    	EnterRule_UNICODE_ESC();
    	EnterRule("UNICODE_ESC", 23);
    	TraceIn("UNICODE_ESC", 23);
    		try
    		{
    		// /Users/abdullin/MessageContracts.g:141:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:141:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(141, 9);
    		Match('\\'); 
    		DebugLocation(141, 14);
    		Match('u'); 
    		DebugLocation(141, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(141, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(141, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(141, 48);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("UNICODE_ESC", 23);
    		LeaveRule("UNICODE_ESC", 23);
    		LeaveRule_UNICODE_ESC();
        }
    }
    // $ANTLR end "UNICODE_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 24);
    	TraceIn("COMMENT", 24);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:144:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
    		int alt9=2;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_0 = input.LA(1);

    		if ((LA9_0=='/'))
    		{
    			int LA9_1 = input.LA(2);

    			if ((LA9_1=='/'))
    			{
    				alt9 = 1;
    			}
    			else if ((LA9_1=='*'))
    			{
    				alt9 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /Users/abdullin/MessageContracts.g:144:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(144, 9);
    			Match("//"); 

    			DebugLocation(144, 14);
    			// /Users/abdullin/MessageContracts.g:144:14: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(6);
    			while (true)
    			{
    				int alt6=2;
    				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    				int LA6_0 = input.LA(1);

    				if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
    				{
    					alt6 = 1;
    				}


    				} finally { DebugExitDecision(6); }
    				switch ( alt6 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// /Users/abdullin/MessageContracts.g:
    					{
    					DebugLocation(144, 14);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop6;
    				}
    			}

    			loop6:
    				;

    			} finally { DebugExitSubRule(6); }

    			DebugLocation(144, 28);
    			// /Users/abdullin/MessageContracts.g:144:28: ( '\\r' )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if ((LA7_0=='\r'))
    			{
    				alt7 = 1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /Users/abdullin/MessageContracts.g:144:28: '\\r'
    				{
    				DebugLocation(144, 28);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }

    			DebugLocation(144, 34);
    			Match('\n'); 
    			DebugLocation(144, 39);
    			_channel=HIDDEN;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /Users/abdullin/MessageContracts.g:145:9: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(145, 9);
    			Match("/*"); 

    			DebugLocation(145, 14);
    			// /Users/abdullin/MessageContracts.g:145:14: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=2;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_0 = input.LA(1);

    				if ((LA8_0=='*'))
    				{
    					int LA8_1 = input.LA(2);

    					if ((LA8_1=='/'))
    					{
    						alt8 = 2;
    					}
    					else if (((LA8_1>='\u0000' && LA8_1<='.')||(LA8_1>='0' && LA8_1<='\uFFFF')))
    					{
    						alt8 = 1;
    					}


    				}
    				else if (((LA8_0>='\u0000' && LA8_0<=')')||(LA8_0>='+' && LA8_0<='\uFFFF')))
    				{
    					alt8 = 1;
    				}


    				} finally { DebugExitDecision(8); }
    				switch ( alt8 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// /Users/abdullin/MessageContracts.g:145:42: .
    					{
    					DebugLocation(145, 42);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop8;
    				}
    			}

    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }

    			DebugLocation(145, 47);
    			Match("*/"); 

    			DebugLocation(145, 52);
    			_channel=HIDDEN;

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 24);
    		LeaveRule("COMMENT", 24);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 25);
    	TraceIn("WS", 25);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// /Users/abdullin/MessageContracts.g:148:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:148:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(148, 9);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(152, 11);
    		_channel=HIDDEN;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 25);
    		LeaveRule("WS", 25);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    public override void mTokens()
    {
    	// /Users/abdullin/MessageContracts.g:1:8: ( T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | EXPLICIT | IF | USING | CONST | INTERFACE | NAMESPACE | EXTERN | ID | Modifier | INT | STRING | COMMENT | WS )
    	int alt10=21;
    	try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    	try
    	{
    		alt10 = dfa10.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(10); }
    	switch (alt10)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// /Users/abdullin/MessageContracts.g:1:10: T__36
    		{
    		DebugLocation(1, 10);
    		mT__36(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// /Users/abdullin/MessageContracts.g:1:16: T__37
    		{
    		DebugLocation(1, 16);
    		mT__37(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// /Users/abdullin/MessageContracts.g:1:22: T__38
    		{
    		DebugLocation(1, 22);
    		mT__38(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// /Users/abdullin/MessageContracts.g:1:28: T__39
    		{
    		DebugLocation(1, 28);
    		mT__39(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// /Users/abdullin/MessageContracts.g:1:34: T__40
    		{
    		DebugLocation(1, 34);
    		mT__40(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// /Users/abdullin/MessageContracts.g:1:40: T__41
    		{
    		DebugLocation(1, 40);
    		mT__41(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// /Users/abdullin/MessageContracts.g:1:46: T__42
    		{
    		DebugLocation(1, 46);
    		mT__42(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// /Users/abdullin/MessageContracts.g:1:52: T__43
    		{
    		DebugLocation(1, 52);
    		mT__43(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// /Users/abdullin/MessageContracts.g:1:58: EXPLICIT
    		{
    		DebugLocation(1, 58);
    		mEXPLICIT(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// /Users/abdullin/MessageContracts.g:1:67: IF
    		{
    		DebugLocation(1, 67);
    		mIF(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// /Users/abdullin/MessageContracts.g:1:70: USING
    		{
    		DebugLocation(1, 70);
    		mUSING(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// /Users/abdullin/MessageContracts.g:1:76: CONST
    		{
    		DebugLocation(1, 76);
    		mCONST(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// /Users/abdullin/MessageContracts.g:1:82: INTERFACE
    		{
    		DebugLocation(1, 82);
    		mINTERFACE(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// /Users/abdullin/MessageContracts.g:1:92: NAMESPACE
    		{
    		DebugLocation(1, 92);
    		mNAMESPACE(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// /Users/abdullin/MessageContracts.g:1:102: EXTERN
    		{
    		DebugLocation(1, 102);
    		mEXTERN(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// /Users/abdullin/MessageContracts.g:1:109: ID
    		{
    		DebugLocation(1, 109);
    		mID(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// /Users/abdullin/MessageContracts.g:1:112: Modifier
    		{
    		DebugLocation(1, 112);
    		mModifier(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// /Users/abdullin/MessageContracts.g:1:121: INT
    		{
    		DebugLocation(1, 121);
    		mINT(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// /Users/abdullin/MessageContracts.g:1:125: STRING
    		{
    		DebugLocation(1, 125);
    		mSTRING(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// /Users/abdullin/MessageContracts.g:1:132: COMMENT
    		{
    		DebugLocation(1, 132);
    		mCOMMENT(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// /Users/abdullin/MessageContracts.g:1:140: WS
    		{
    		DebugLocation(1, 140);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x9\xFFFF\x5\xE\x7\xFFFF\x1\xE\x1\x1D\x6\xE\x1\xFFFF\xD\xE\x1\x31\x1"+
			"\x32\x2\xE\x1\x35\x1\xE\x2\xFFFF\x2\xE\x1\xFFFF\x2\xE\x1\x3B\x2\xE\x1"+
			"\xFFFF\x1\x3E\x1\x3F\x2\xFFFF";
		private const string DFA10_eofS =
			"\x40\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x8\xFFFF\x1\x78\x1\x66\x1\x73\x1\x6F\x1\x61\x7\xFFFF\x1\x70\x1"+
			"\x30\x1\x74\x1\x69\x1\x6E\x1\x6D\x1\x6C\x1\x65\x1\xFFFF\x1\x65\x1\x6E"+
			"\x1\x73\x1\x65\x1\x69\x2\x72\x1\x67\x1\x74\x1\x73\x1\x63\x1\x6E\x1\x66"+
			"\x2\x30\x1\x70\x1\x69\x1\x30\x1\x61\x2\xFFFF\x1\x61\x1\x74\x1\xFFFF\x2"+
			"\x63\x1\x30\x2\x65\x1\xFFFF\x2\x30\x2\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7D\x8\xFFFF\x1\x78\x1\x6E\x1\x73\x1\x6F\x1\x61\x7\xFFFF\x1\x74\x1"+
			"\x7A\x1\x74\x1\x69\x1\x6E\x1\x6D\x1\x6C\x1\x65\x1\xFFFF\x1\x65\x1\x6E"+
			"\x1\x73\x1\x65\x1\x69\x2\x72\x1\x67\x1\x74\x1\x73\x1\x63\x1\x6E\x1\x66"+
			"\x2\x7A\x1\x70\x1\x69\x1\x7A\x1\x61\x2\xFFFF\x1\x61\x1\x74\x1\xFFFF\x2"+
			"\x63\x1\x7A\x2\x65\x1\xFFFF\x2\x7A\x2\xFFFF";
		private const string DFA10_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x5\xFFFF\x1"+
			"\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15\x1\x5\x8\xFFFF\x1\xA\x13\xFFFF"+
			"\x1\xB\x1\xC\x2\xFFFF\x1\xF\x5\xFFFF\x1\x9\x2\xFFFF\x1\xD\x1\xE";
		private const string DFA10_specialS =
			"\x40\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x13\x2\xFFFF\x1\x13\x12\xFFFF\x1\x13\x1\xF\x1\x11\x1\xFFFF\x1\xF"+
				"\x3\xFFFF\x1\x1\x1\x2\x2\xFFFF\x1\x3\x1\xFFFF\x1\x4\x1\x12\xA\x10\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x6\x1\xFFFF\x1\xF\x1\xFFFF\x1A\xE\x4\xFFFF"+
				"\x1\xE\x1\xFFFF\x2\xE\x1\xC\x1\xE\x1\x9\x3\xE\x1\xA\x4\xE\x1\xD\x6\xE"+
				"\x1\xB\x5\xE\x1\x7\x1\xFFFF\x1\x8",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x15",
				"\x1\x16\x7\xFFFF\x1\x17",
				"\x1\x18",
				"\x1\x19",
				"\x1\x1A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1B\x3\xFFFF\x1\x1C",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"\x1\x1E",
				"\x1\x1F",
				"\x1\x20",
				"\x1\x21",
				"\x1\x22",
				"\x1\x23",
				"",
				"\x1\x24",
				"\x1\x25",
				"\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"\x1\x2F",
				"\x1\x30",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"\x1\x33",
				"\x1\x34",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"\x1\x36",
				"",
				"",
				"\x1\x37",
				"\x1\x38",
				"",
				"\x1\x39",
				"\x1\x3A",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"\x1\x3C",
				"\x1\x3D",
				"",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"\xA\xE\x2\xFFFF\x1\xE\x1\xFFFF\x1\xE\x2\xFFFF\x1B\xE\x1\xFFFF\x1\xE"+
				"\x1\xFFFF\x1\xE\x1\xFFFF\x1A\xE",
				"",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | EXPLICIT | IF | USING | CONST | INTERFACE | NAMESPACE | EXTERN | ID | Modifier | INT | STRING | COMMENT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  MessageContracts 
